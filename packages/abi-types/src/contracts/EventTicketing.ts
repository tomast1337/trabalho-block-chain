/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EventTicketingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyTicket"
      | "createEvent"
      | "eventCount"
      | "events"
      | "getAttendedEventsPaginated"
      | "getEventDetails"
      | "getEventsPaginated"
      | "getRemainingTickets"
      | "getTicketsOwned"
      | "isEventActive"
      | "owner"
      | "usdcToken"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EventCreated"
      | "FundsWithdrawn"
      | "TicketPurchased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eventCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttendedEventsPaginated",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventsPaginated",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingTickets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketsOwned",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEventActive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAttendedEventsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEventsPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketsOwned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isEventActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace EventCreatedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    organizer: AddressLike,
    name: string,
    ticketPrice: BigNumberish,
    totalTickets: BigNumberish,
    eventDate: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    organizer: string,
    name: string,
    ticketPrice: bigint,
    totalTickets: bigint,
    eventDate: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    organizer: string;
    name: string;
    ticketPrice: bigint;
    totalTickets: bigint;
    eventDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    organizer: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    organizer: string,
    amount: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    organizer: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TicketPurchasedEvent {
  export type InputTuple = [
    eventId: BigNumberish,
    attendee: AddressLike,
    quantity: BigNumberish
  ];
  export type OutputTuple = [
    eventId: bigint,
    attendee: string,
    quantity: bigint
  ];
  export interface OutputObject {
    eventId: bigint;
    attendee: string;
    quantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EventTicketing extends BaseContract {
  connect(runner?: ContractRunner | null): EventTicketing;
  waitForDeployment(): Promise<this>;

  interface: EventTicketingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyTicket: TypedContractMethod<
    [_eventId: BigNumberish, _quantity: BigNumberish],
    [void],
    "nonpayable"
  >;

  createEvent: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _ticketPrice: BigNumberish,
      _totalTickets: BigNumberish,
      _eventDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  eventCount: TypedContractMethod<[], [bigint], "view">;

  events: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint, boolean] & {
        organizer: string;
        name: string;
        description: string;
        ticketPrice: bigint;
        totalTickets: bigint;
        ticketsSold: bigint;
        eventDate: bigint;
        isEventOver: boolean;
      }
    ],
    "view"
  >;

  getAttendedEventsPaginated: TypedContractMethod<
    [_attendee: AddressLike, _page: BigNumberish, _pageSize: BigNumberish],
    [
      [bigint[], bigint[], bigint] & {
        eventIds: bigint[];
        ticketCounts: bigint[];
        totalEvents: bigint;
      }
    ],
    "view"
  >;

  getEventDetails: TypedContractMethod<
    [_eventId: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint, boolean] & {
        organizer: string;
        name: string;
        description: string;
        ticketPrice: bigint;
        totalTickets: bigint;
        ticketsSold: bigint;
        eventDate: bigint;
        isEventOver: boolean;
      }
    ],
    "view"
  >;

  getEventsPaginated: TypedContractMethod<
    [_page: BigNumberish, _pageSize: BigNumberish, _onlyActive: boolean],
    [
      [bigint[], string[], boolean[], bigint] & {
        eventIds: bigint[];
        names: string[];
        isFinished: boolean[];
        totalEvents: bigint;
      }
    ],
    "view"
  >;

  getRemainingTickets: TypedContractMethod<
    [_eventId: BigNumberish],
    [bigint],
    "view"
  >;

  getTicketsOwned: TypedContractMethod<
    [_eventId: BigNumberish, _attendee: AddressLike],
    [bigint],
    "view"
  >;

  isEventActive: TypedContractMethod<
    [_eventId: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  usdcToken: TypedContractMethod<[], [string], "view">;

  withdrawFunds: TypedContractMethod<
    [_eventId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyTicket"
  ): TypedContractMethod<
    [_eventId: BigNumberish, _quantity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createEvent"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _ticketPrice: BigNumberish,
      _totalTickets: BigNumberish,
      _eventDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eventCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "events"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint, boolean] & {
        organizer: string;
        name: string;
        description: string;
        ticketPrice: bigint;
        totalTickets: bigint;
        ticketsSold: bigint;
        eventDate: bigint;
        isEventOver: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAttendedEventsPaginated"
  ): TypedContractMethod<
    [_attendee: AddressLike, _page: BigNumberish, _pageSize: BigNumberish],
    [
      [bigint[], bigint[], bigint] & {
        eventIds: bigint[];
        ticketCounts: bigint[];
        totalEvents: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEventDetails"
  ): TypedContractMethod<
    [_eventId: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, bigint, boolean] & {
        organizer: string;
        name: string;
        description: string;
        ticketPrice: bigint;
        totalTickets: bigint;
        ticketsSold: bigint;
        eventDate: bigint;
        isEventOver: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEventsPaginated"
  ): TypedContractMethod<
    [_page: BigNumberish, _pageSize: BigNumberish, _onlyActive: boolean],
    [
      [bigint[], string[], boolean[], bigint] & {
        eventIds: bigint[];
        names: string[];
        isFinished: boolean[];
        totalEvents: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRemainingTickets"
  ): TypedContractMethod<[_eventId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTicketsOwned"
  ): TypedContractMethod<
    [_eventId: BigNumberish, _attendee: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isEventActive"
  ): TypedContractMethod<[_eventId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[_eventId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "EventCreated"
  ): TypedContractEvent<
    EventCreatedEvent.InputTuple,
    EventCreatedEvent.OutputTuple,
    EventCreatedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "TicketPurchased"
  ): TypedContractEvent<
    TicketPurchasedEvent.InputTuple,
    TicketPurchasedEvent.OutputTuple,
    TicketPurchasedEvent.OutputObject
  >;

  filters: {
    "EventCreated(uint256,address,string,uint256,uint256,uint256)": TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;
    EventCreated: TypedContractEvent<
      EventCreatedEvent.InputTuple,
      EventCreatedEvent.OutputTuple,
      EventCreatedEvent.OutputObject
    >;

    "FundsWithdrawn(uint256,address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "TicketPurchased(uint256,address,uint256)": TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;
    TicketPurchased: TypedContractEvent<
      TicketPurchasedEvent.InputTuple,
      TicketPurchasedEvent.OutputTuple,
      TicketPurchasedEvent.OutputObject
    >;
  };
}
