/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { MockUSDC, MockUSDCInterface } from "../../contracts/MockUSDC";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051806040016040528060098152602001684d6f636b205553444360b81b815250604051806040016040528060048152602001635553444360e01b815250816003908161005f91906102ba565b50600461006c82826102ba565b5050600580546001600160a01b031916339081179091556100ad9150610090600690565b61009b90600a610477565b6100a890620f424061048d565b6100b2565b6104b7565b6001600160a01b0382166100e15760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b6100ed600083836100f1565b5050565b6001600160a01b03831661011c57806002600082825461011191906104a4565b9091555061018e9050565b6001600160a01b0383166000908152602081905260409020548181101561016f5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016100d8565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166101aa576002805482900390556101c9565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161020e91815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061024557607f821691505b60208210810361026557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102b557806000526020600020601f840160051c810160208510156102925750805b601f840160051c820191505b818110156102b2576000815560010161029e565b50505b505050565b81516001600160401b038111156102d3576102d361021b565b6102e7816102e18454610231565b8461026b565b6020601f82116001811461031b57600083156103035750848201515b600019600385901b1c1916600184901b1784556102b2565b600084815260208120601f198516915b8281101561034b578785015182556020948501946001909201910161032b565b50848210156103695786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6001815b60018411156103c9578085048111156103ad576103ad610378565b60018416156103bb57908102905b60019390931c928002610392565b935093915050565b6000826103e057506001610471565b816103ed57506000610471565b8160018114610403576002811461040d57610429565b6001915050610471565b60ff84111561041e5761041e610378565b50506001821b610471565b5060208310610133831016604e8410600b841016171561044c575081810a610471565b610459600019848461038e565b806000190482111561046d5761046d610378565b0290505b92915050565b600061048660ff8416836103d1565b9392505050565b808202811582820484141761047157610471610378565b8082018082111561047157610471610378565b610820806104c66000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806340c10f191161007157806340c10f191461012357806370a08231146101385780638da5cb5b1461016157806395d89b411461018c578063a9059cbb14610194578063dd62ed3e146101a757600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101e0565b6040516100c39190610669565b60405180910390f35b6100df6100da3660046106d3565b610272565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f3660046106fd565b61028c565b604051600681526020016100c3565b6101366101313660046106d3565b6102b0565b005b6100f361014636600461073a565b6001600160a01b031660009081526020819052604090205490565b600554610174906001600160a01b031681565b6040516001600160a01b0390911681526020016100c3565b6100b6610327565b6100df6101a23660046106d3565b610336565b6100f36101b536600461075c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101ef9061078f565b80601f016020809104026020016040519081016040528092919081815260200182805461021b9061078f565b80156102685780601f1061023d57610100808354040283529160200191610268565b820191906000526020600020905b81548152906001019060200180831161024b57829003601f168201915b5050505050905090565b600033610280818585610344565b60019150505b92915050565b60003361029a858285610356565b6102a58585856103d5565b506001949350505050565b6005546001600160a01b031633146103195760405162461bcd60e51b815260206004820152602160248201527f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f6044820152603760f91b60648201526084015b60405180910390fd5b6103238282610434565b5050565b6060600480546101ef9061078f565b6000336102808185856103d5565b610351838383600161046a565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198110156103cf57818110156103c057604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610310565b6103cf8484848403600061046a565b50505050565b6001600160a01b0383166103ff57604051634b637e8f60e11b815260006004820152602401610310565b6001600160a01b0382166104295760405163ec442f0560e01b815260006004820152602401610310565b61035183838361053f565b6001600160a01b03821661045e5760405163ec442f0560e01b815260006004820152602401610310565b6103236000838361053f565b6001600160a01b0384166104945760405163e602df0560e01b815260006004820152602401610310565b6001600160a01b0383166104be57604051634a1406b160e11b815260006004820152602401610310565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156103cf57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161053191815260200190565b60405180910390a350505050565b6001600160a01b03831661056a57806002600082825461055f91906107c9565b909155506105dc9050565b6001600160a01b038316600090815260208190526040902054818110156105bd5760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610310565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166105f857600280548290039055610617565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161065c91815260200190565b60405180910390a3505050565b602081526000825180602084015260005b81811015610697576020818601810151604086840101520161067a565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b03811681146106ce57600080fd5b919050565b600080604083850312156106e657600080fd5b6106ef836106b7565b946020939093013593505050565b60008060006060848603121561071257600080fd5b61071b846106b7565b9250610729602085016106b7565b929592945050506040919091013590565b60006020828403121561074c57600080fd5b610755826106b7565b9392505050565b6000806040838503121561076f57600080fd5b610778836106b7565b9150610786602084016106b7565b90509250929050565b600181811c908216806107a357607f821691505b6020821081036107c357634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561028657634e487b7160e01b600052601160045260246000fdfea26469706673582212204ecdfa4152cbaa08c9db0f00b064cbff2db26cd860d5890f41aac774bc87cd0964736f6c634300081c0033";

type MockUSDCConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUSDCConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUSDC__factory extends ContractFactory {
  constructor(...args: MockUSDCConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockUSDC & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockUSDC__factory {
    return super.connect(runner) as MockUSDC__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUSDCInterface {
    return new Interface(_abi) as MockUSDCInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockUSDC {
    return new Contract(address, _abi, runner) as unknown as MockUSDC;
  }
}
