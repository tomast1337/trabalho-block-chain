/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface EventTicketingInterface extends utils.Interface {
  functions: {
    "buyTicket(uint256,uint256)": FunctionFragment;
    "createEvent(string,string,uint256,uint256,uint256)": FunctionFragment;
    "eventCount()": FunctionFragment;
    "events(uint256)": FunctionFragment;
    "getEventDetails(uint256)": FunctionFragment;
    "getTicketsOwned(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "withdrawFunds(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyTicket"
      | "createEvent"
      | "eventCount"
      | "events"
      | "getEventDetails"
      | "getTicketsOwned"
      | "owner"
      | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEvent",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "eventCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "events",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEventDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketsOwned",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eventCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "events", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEventDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicketsOwned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "EventCreated(uint256,address,string,uint256,uint256,uint256)": EventFragment;
    "FundsWithdrawn(uint256,address,uint256)": EventFragment;
    "TicketPurchased(uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EventCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketPurchased"): EventFragment;
}

export interface EventCreatedEventObject {
  eventId: BigNumber;
  organizer: string;
  name: string;
  ticketPrice: BigNumber;
  totalTickets: BigNumber;
  eventDate: BigNumber;
}
export type EventCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  EventCreatedEventObject
>;

export type EventCreatedEventFilter = TypedEventFilter<EventCreatedEvent>;

export interface FundsWithdrawnEventObject {
  eventId: BigNumber;
  organizer: string;
  amount: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface TicketPurchasedEventObject {
  eventId: BigNumber;
  attendee: string;
  quantity: BigNumber;
}
export type TicketPurchasedEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  TicketPurchasedEventObject
>;

export type TicketPurchasedEventFilter = TypedEventFilter<TicketPurchasedEvent>;

export interface EventTicketing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventTicketingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyTicket(
      _eventId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    createEvent(
      _name: string,
      _description: string,
      _ticketPrice: BigNumberish,
      _totalTickets: BigNumberish,
      _eventDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    eventCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        organizer: string;
        name: string;
        description: string;
        ticketPrice: BigNumber;
        totalTickets: BigNumber;
        ticketsSold: BigNumber;
        eventDate: BigNumber;
        isEventOver: boolean;
      }
    >;

    getEventDetails(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        organizer: string;
        name: string;
        description: string;
        ticketPrice: BigNumber;
        totalTickets: BigNumber;
        ticketsSold: BigNumber;
        eventDate: BigNumber;
        isEventOver: boolean;
      }
    >;

    getTicketsOwned(
      _eventId: BigNumberish,
      _attendee: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    withdrawFunds(
      _eventId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  buyTicket(
    _eventId: BigNumberish,
    _quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  createEvent(
    _name: string,
    _description: string,
    _ticketPrice: BigNumberish,
    _totalTickets: BigNumberish,
    _eventDate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  eventCount(overrides?: CallOverrides): Promise<BigNumber>;

  events(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      organizer: string;
      name: string;
      description: string;
      ticketPrice: BigNumber;
      totalTickets: BigNumber;
      ticketsSold: BigNumber;
      eventDate: BigNumber;
      isEventOver: boolean;
    }
  >;

  getEventDetails(
    _eventId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      organizer: string;
      name: string;
      description: string;
      ticketPrice: BigNumber;
      totalTickets: BigNumber;
      ticketsSold: BigNumber;
      eventDate: BigNumber;
      isEventOver: boolean;
    }
  >;

  getTicketsOwned(
    _eventId: BigNumberish,
    _attendee: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  withdrawFunds(
    _eventId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyTicket(
      _eventId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createEvent(
      _name: string,
      _description: string,
      _ticketPrice: BigNumberish,
      _totalTickets: BigNumberish,
      _eventDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    eventCount(overrides?: CallOverrides): Promise<BigNumber>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        organizer: string;
        name: string;
        description: string;
        ticketPrice: BigNumber;
        totalTickets: BigNumber;
        ticketsSold: BigNumber;
        eventDate: BigNumber;
        isEventOver: boolean;
      }
    >;

    getEventDetails(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        organizer: string;
        name: string;
        description: string;
        ticketPrice: BigNumber;
        totalTickets: BigNumber;
        ticketsSold: BigNumber;
        eventDate: BigNumber;
        isEventOver: boolean;
      }
    >;

    getTicketsOwned(
      _eventId: BigNumberish,
      _attendee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    withdrawFunds(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EventCreated(uint256,address,string,uint256,uint256,uint256)"(
      eventId?: null,
      organizer?: null,
      name?: null,
      ticketPrice?: null,
      totalTickets?: null,
      eventDate?: null
    ): EventCreatedEventFilter;
    EventCreated(
      eventId?: null,
      organizer?: null,
      name?: null,
      ticketPrice?: null,
      totalTickets?: null,
      eventDate?: null
    ): EventCreatedEventFilter;

    "FundsWithdrawn(uint256,address,uint256)"(
      eventId?: null,
      organizer?: null,
      amount?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      eventId?: null,
      organizer?: null,
      amount?: null
    ): FundsWithdrawnEventFilter;

    "TicketPurchased(uint256,address,uint256)"(
      eventId?: null,
      attendee?: null,
      quantity?: null
    ): TicketPurchasedEventFilter;
    TicketPurchased(
      eventId?: null,
      attendee?: null,
      quantity?: null
    ): TicketPurchasedEventFilter;
  };

  estimateGas: {
    buyTicket(
      _eventId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    createEvent(
      _name: string,
      _description: string,
      _ticketPrice: BigNumberish,
      _totalTickets: BigNumberish,
      _eventDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    eventCount(overrides?: CallOverrides): Promise<BigNumber>;

    events(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getEventDetails(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicketsOwned(
      _eventId: BigNumberish,
      _attendee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawFunds(
      _eventId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTicket(
      _eventId: BigNumberish,
      _quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createEvent(
      _name: string,
      _description: string,
      _ticketPrice: BigNumberish,
      _totalTickets: BigNumberish,
      _eventDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    eventCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    events(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEventDetails(
      _eventId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicketsOwned(
      _eventId: BigNumberish,
      _attendee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawFunds(
      _eventId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
